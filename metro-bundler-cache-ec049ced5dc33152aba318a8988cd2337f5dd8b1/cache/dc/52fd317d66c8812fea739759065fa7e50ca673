Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./node_modules/react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = '/home/l5vd5/watchman/reactNative/App.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Screen = require('./Screen1');

var _Screen2 = _interopRequireDefault(_Screen);

var _Screen3 = require('./Screen2');

var _Screen4 = _interopRequireDefault(_Screen3);

var _Symptom = require('./Symptom');

var _Symptom2 = _interopRequireDefault(_Symptom);

var _reactNativeRouterFlux = require('react-native-router-flux');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
    App: {
        displayName: 'App'
    }
};

var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: '/home/l5vd5/watchman/reactNative/App.js',
    components: _components,
    locals: [module],
    imports: [_react3.default]
});

function _wrapComponent(id) {
    return function (Component) {
        return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
}

var App = _wrapComponent('App')(function (_React$Component) {
    _inherits(App, _React$Component);

    function App() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, App);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = App.__proto__ || Object.getPrototypeOf(App)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            fontLoaded: false,
            language: undefined
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(App, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            return regeneratorRuntime.async(function componentWillMount$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return regeneratorRuntime.awrap(Expo.Font.loadAsync({
                                'Roboto': require('native-base/Fonts/Roboto.ttf'),
                                'Roboto_medium': require('native-base/Fonts/Roboto_medium.ttf'),
                                'Ionicons': require('@expo/vector-icons/fonts/Ionicons.ttf')
                            }));

                        case 2:
                            this.setState({ fontLoaded: true });

                        case 3:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: 'render',
        value: function render() {
            return this.state.fontLoaded ? _react3.default.createElement(
                _reactNativeRouterFlux.Router,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 21
                    }
                },
                _react3.default.createElement(
                    _reactNativeRouterFlux.Scene,
                    { key: 'root', hideNavBar: true, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 22
                        }
                    },
                    _react3.default.createElement(_reactNativeRouterFlux.Scene, { key: 'screen1', component: _Screen2.default, title: 'Home', initial: true, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 23
                        }
                    }),
                    _react3.default.createElement(_reactNativeRouterFlux.Scene, { key: 'screen2', component: _Screen4.default, title: 'Select', __source: {
                            fileName: _jsxFileName,
                            lineNumber: 24
                        }
                    }),
                    _react3.default.createElement(_reactNativeRouterFlux.Scene, { key: 'list', component: _Symptom2.default, title: 'List', __source: {
                            fileName: _jsxFileName,
                            lineNumber: 25
                        }
                    })
                )
            ) : null;
        }
    }]);

    return App;
}(_react3.default.Component));

exports.default = App;