Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./node_modules/react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = '/home/l5vd5/watchman/reactNative/Symptom.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nativeBase = require('native-base');

var _Container = require('./Container');

var _Container2 = _interopRequireDefault(_Container);

var _reactNativeRouterFlux = require('react-native-router-flux');

var _getData = require('./getData.js');

var _reactNativeCheckbox = require('react-native-checkbox');

var _reactNativeCheckbox2 = _interopRequireDefault(_reactNativeCheckbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
    Symptom: {
        displayName: 'Symptom'
    }
};

var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: '/home/l5vd5/watchman/reactNative/Symptom.js',
    components: _components,
    locals: [module],
    imports: [_react3.default]
});

function _wrapComponent(id) {
    return function (Component) {
        return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
}

var Symptom = _wrapComponent('Symptom')(function (_React$Component) {
    _inherits(Symptom, _React$Component);

    function Symptom(props) {
        _classCallCheck(this, Symptom);

        var _this = _possibleConstructorReturn(this, (Symptom.__proto__ || Object.getPrototypeOf(Symptom)).call(this, props));

        _this.state = {
            language: (0, _getData.getData)(_this.props.language),
            selected2: []
        };

        var language = _this.state.language.symptom;
        var where = _this.props.where;

        global.lists = language[where].map(function (s, i) {
            return s;
        });

        global.index = new Array(global.lists.length);
        global.index.fill(false);

        global.goToNext = function () {
            return _reactNativeRouterFlux.Actions.screen3({
                where: _this.props.where,
                language: _this.props.language,
                whereLanguage: _this.props.whereLanguage,
                whereKor: _this.props.whereKor,
                checked: _this.state.selected2,
                symptom: _this.props.symptom
            });
        };
        return _this;
    }

    _createClass(Symptom, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.setState({
                selected2: global.index
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var B = global.lists.map(function (s, i) {
                return _react3.default.createElement(
                    _nativeBase.ListItem,
                    { key: s[0],
                        onPress: function onPress() {
                            var newSelected2 = Object.values(_this2.state.selected2);
                            newSelected2[i] = !newSelected2[i];
                            _this2.setState({ selected2: newSelected2 });
                        },
                        style: { marginLeft: 0, paddingLeft: 18 },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 48
                        }
                    },
                    _react3.default.createElement(_reactNativeCheckbox2.default, {
                        checked: _this2.state.selected2[i],
                        label: s[1],
                        onChange: function onChange() {
                            var newSelected2 = Object.values(_this2.state.selected2);
                            newSelected2[i] = !newSelected2[i];
                            _this2.setState({ selected2: newSelected2 });
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 56
                        }
                    })
                );
            });

            return _react3.default.createElement(
                _Container2.default,
                { language: this.props.language, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 69
                    }
                },
                _react3.default.createElement(
                    _nativeBase.Content,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 71
                        }
                    },
                    B,
                    _react3.default.createElement(
                        _nativeBase.Button,
                        { block: true, click: true, onPress: global.goToNext, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 85
                            }
                        },
                        _react3.default.createElement(
                            _nativeBase.Text,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 86
                                }
                            },
                            ' >> '
                        )
                    )
                )
            );
        }
    }]);

    return Symptom;
}(_react3.default.Component));

exports.default = Symptom;